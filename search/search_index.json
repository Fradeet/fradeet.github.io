{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello World! \u6700\u8fd1\u66f4\u65b0 PyTorch \u6a21\u578b\u8f6c\u6362\u4e3a ONNX \u6a21\u578b\u521d\u4f53\u9a8c - 20230603","title":"Home"},{"location":"#hello-world","text":"","title":"Hello World!"},{"location":"#_1","text":"PyTorch \u6a21\u578b\u8f6c\u6362\u4e3a ONNX \u6a21\u578b\u521d\u4f53\u9a8c - 20230603","title":"\u6700\u8fd1\u66f4\u65b0"},{"location":"About/Fradeet/","text":"Fradeet","title":"Fradeet"},{"location":"About/Fradeet/#fradeet","text":"","title":"Fradeet"},{"location":"About/View_on_Github/","text":"View on GitHub GitHub Pages Personal Website","title":"View on GitHub"},{"location":"About/View_on_Github/#view-on-github","text":"GitHub Pages Personal Website","title":"View on GitHub"},{"location":"Playground/Playground_info/","text":"Info","title":"Info"},{"location":"Playground/Playground_info/#info","text":"","title":"Info"},{"location":"Playground/Think_about_Ascend_Atlas/","text":"\u4e3a\u4e867\u6298\u5238\uff0c\u6211\u51b3\u5b9a\u8bf4\u5f97\u66f4\u8be6\u7ec6\u4e00\u70b9\u3002 \u603b\u7684\u6765\u8bf4\uff0c\u6211\u4f1a\u5c06\u6211\u7814\u7a76\u7684\u8d85\u5206\u8fa8\u7387\u6a21\u578b\u653e\u81f3\u6607\u817e\u5f00\u53d1\u677f\u8fdb\u884c\u63a8\u7406\u6d4b\u8bd5\u6027\u80fd\u3002 \u6b63\u5728\u7814\u7a76\u8d85\u5206\u8fa8\u7387\u6a21\u578b \u6211\u6b63\u5728\u7814\u7a76\u8d85\u5206\u8fa8\u7387\u6a21\u578b\uff0c\u4f8b\u5982 EDSR \uff0c\u5f53\u7136\u8fd8\u6709\u5f88\u591a\u53d8\u79cd\u7684\u8d85\u5206\u8fa8\u7387\u6a21\u578b\uff0c\u5f53\u524d\u6211\u6b63\u5728\u6bd4\u5bf9\u5b83\u4eec\u4e4b\u95f4\u76f8\u5bf9\u7684\u6027\u80fd\u3002\uff08\u6211\u4f7f\u7528\u7684\u4ee3\u7801 https://github.com/Fradeet/BasicSR-modify \uff09\u8d2d\u4e70 A2 \u5f00\u53d1\u677f\u5219\u6211\u53ef\u4ee5\u5c06\u6211\u7684\u7814\u7a76\u8fdb\u884c\u6269\u5c55\uff0c\u6211\u53ef\u4ee5\u6d4b\u8bd5\u8d85\u5206\u8fa8\u7387\u5728\u5b9e\u9645\u65f6\u8fdb\u884c\u63a8\u7406\u7684\u6027\u80fd\uff0c\u6d4b\u8bd5\u5b9e\u9645\u65f6\u7684\u74f6\u9888\uff0c\u6bd5\u7adf\u8bad\u7ec3\u4e0e\u63a8\u7406\u662f\u4e24\u56de\u4e8b\u3002 \u4e5f\u7814\u7a76\u6df1\u5ea6\u5b66\u4e60\u7684\u5176\u4ed6\u65b9\u9762 \u6211\u8fd8\u5f04\u6df1\u5ea6\u5b66\u4e60\u7684\u5176\u4ed6\u65b9\u9762\uff0c\u6700\u8fd1\u7684\u4eba\u5de5\u667a\u80fd\u56fe\u50cf\u751f\u6210\u6211\u5c31\u5f88\u611f\u5174\u8da3\u3002\u6211\u6b63\u5728\u5c1d\u8bd5\u5c06\u8fd9\u79cd\u5927\u6a21\u578b\u90e8\u7f72\u81f3\u5f00\u53d1\u677f\u4e0a\u8fd0\u884c\uff0c\u56e0\u4e3a\u60f3\u8bd5\u8bd5 CANN \u7684\u7b97\u5b50\u878d\u5408\u540e\u6027\u80fd\u4f1a\u6709\u591a\u5927\u7684\u63d0\u5347\u3002\u5f53\u7136\u76ee\u524d\u9047\u5230\u4e86\u7b97\u5b50\u4e0d\u652f\u6301\u7684\u95ee\u9898\uff0c\u6211\u4e5f\u662f\u6709\u5fc3\u7406\u51c6\u5907\u53bb\u89e3\u51b3\u8fd9\u4e9b\u4f1a\u53d1\u751f\u7684\u95ee\u9898\u3002\u4e0d\u8fc7\u5f53\u524d\u786e\u5b9e\u4e3b\u8981\u91cd\u5fc3\u8fd8\u662f\u8d85\u5206\u8fa8\u7387\u3002 \u4e3a\u4ec0\u4e48\u8981\u8d2d\u4e70 A2 \u5f00\u53d1\u677f \u8d2d\u4e70\u5f00\u53d1\u677f\u540e\uff0c\u6211\u53ef\u4ee5\u5728\u6607\u817e\u8bba\u575b\u53d1\u6587\u7ae0\u4e86\uff0c\u91cd\u70b9\u8fd8\u662f\u5199\u7684\u662f\u8d85\u5206\u8fa8\u7387\u6a21\u578b\u8f6c om \u6a21\u578b\u65f6\u9047\u5230\u7684\u7b97\u5b50\u8f6c\u6362\u95ee\u9898\uff0c\u6a21\u578b\u8c03\u4f18\u7b49\u8fd8\u8981\u770b\u5230\u65f6\u5b9e\u9645\u5e94\u7528\u65f6\u662f\u5426\u6709\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6607\u817e\u67b6\u6784\u4e0d\u540c\u786e\u5b9e\u53ef\u80fd\u4f1a\u9047\u5230\u8fd9\u6837\u7684\u6311\u6218\u3002 \u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u8d2d\u4e70 A2 \u5f00\u53d1\u677f\u5c31\u662f\u4e3a\u4e86\u4f53\u9a8c\u5b9e\u9645\u5e94\u7528\u65f6\u9047\u5230\u7684\u60c5\u51b5\uff0c\u6211\u6ce8\u91cd\u5b9e\u9645\u5e94\u7528\uff0c\u5e0c\u671b\u81ea\u5df1\u80fd\u505a\u5230\u8bad\u7ec3\u63a8\u7406\u4e00\u6761\u9f99\u670d\u52a1\u3002 \uff08\u5982\u679c\u8d2d\u4e70\u65b0\u4e00\u4ee3\u5f00\u53d1\u8005\u5957\u4ef6Atlas 200I DK A2\u540e\uff0c\u60a8\u7684\u5e94\u7528\u8ba1\u5212\u53ca\u9884\u8ba1\u6210\u679c\u662f\u4ec0\u4e48\uff1f\uff09","title":"Think about Ascend Atlas"},{"location":"Playground/Think_about_Ascend_Atlas/#_1","text":"\u6211\u6b63\u5728\u7814\u7a76\u8d85\u5206\u8fa8\u7387\u6a21\u578b\uff0c\u4f8b\u5982 EDSR \uff0c\u5f53\u7136\u8fd8\u6709\u5f88\u591a\u53d8\u79cd\u7684\u8d85\u5206\u8fa8\u7387\u6a21\u578b\uff0c\u5f53\u524d\u6211\u6b63\u5728\u6bd4\u5bf9\u5b83\u4eec\u4e4b\u95f4\u76f8\u5bf9\u7684\u6027\u80fd\u3002\uff08\u6211\u4f7f\u7528\u7684\u4ee3\u7801 https://github.com/Fradeet/BasicSR-modify \uff09\u8d2d\u4e70 A2 \u5f00\u53d1\u677f\u5219\u6211\u53ef\u4ee5\u5c06\u6211\u7684\u7814\u7a76\u8fdb\u884c\u6269\u5c55\uff0c\u6211\u53ef\u4ee5\u6d4b\u8bd5\u8d85\u5206\u8fa8\u7387\u5728\u5b9e\u9645\u65f6\u8fdb\u884c\u63a8\u7406\u7684\u6027\u80fd\uff0c\u6d4b\u8bd5\u5b9e\u9645\u65f6\u7684\u74f6\u9888\uff0c\u6bd5\u7adf\u8bad\u7ec3\u4e0e\u63a8\u7406\u662f\u4e24\u56de\u4e8b\u3002","title":"\u6b63\u5728\u7814\u7a76\u8d85\u5206\u8fa8\u7387\u6a21\u578b"},{"location":"Playground/Think_about_Ascend_Atlas/#_2","text":"\u6211\u8fd8\u5f04\u6df1\u5ea6\u5b66\u4e60\u7684\u5176\u4ed6\u65b9\u9762\uff0c\u6700\u8fd1\u7684\u4eba\u5de5\u667a\u80fd\u56fe\u50cf\u751f\u6210\u6211\u5c31\u5f88\u611f\u5174\u8da3\u3002\u6211\u6b63\u5728\u5c1d\u8bd5\u5c06\u8fd9\u79cd\u5927\u6a21\u578b\u90e8\u7f72\u81f3\u5f00\u53d1\u677f\u4e0a\u8fd0\u884c\uff0c\u56e0\u4e3a\u60f3\u8bd5\u8bd5 CANN \u7684\u7b97\u5b50\u878d\u5408\u540e\u6027\u80fd\u4f1a\u6709\u591a\u5927\u7684\u63d0\u5347\u3002\u5f53\u7136\u76ee\u524d\u9047\u5230\u4e86\u7b97\u5b50\u4e0d\u652f\u6301\u7684\u95ee\u9898\uff0c\u6211\u4e5f\u662f\u6709\u5fc3\u7406\u51c6\u5907\u53bb\u89e3\u51b3\u8fd9\u4e9b\u4f1a\u53d1\u751f\u7684\u95ee\u9898\u3002\u4e0d\u8fc7\u5f53\u524d\u786e\u5b9e\u4e3b\u8981\u91cd\u5fc3\u8fd8\u662f\u8d85\u5206\u8fa8\u7387\u3002","title":"\u4e5f\u7814\u7a76\u6df1\u5ea6\u5b66\u4e60\u7684\u5176\u4ed6\u65b9\u9762"},{"location":"Playground/Think_about_Ascend_Atlas/#a2","text":"\u8d2d\u4e70\u5f00\u53d1\u677f\u540e\uff0c\u6211\u53ef\u4ee5\u5728\u6607\u817e\u8bba\u575b\u53d1\u6587\u7ae0\u4e86\uff0c\u91cd\u70b9\u8fd8\u662f\u5199\u7684\u662f\u8d85\u5206\u8fa8\u7387\u6a21\u578b\u8f6c om \u6a21\u578b\u65f6\u9047\u5230\u7684\u7b97\u5b50\u8f6c\u6362\u95ee\u9898\uff0c\u6a21\u578b\u8c03\u4f18\u7b49\u8fd8\u8981\u770b\u5230\u65f6\u5b9e\u9645\u5e94\u7528\u65f6\u662f\u5426\u6709\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u6607\u817e\u67b6\u6784\u4e0d\u540c\u786e\u5b9e\u53ef\u80fd\u4f1a\u9047\u5230\u8fd9\u6837\u7684\u6311\u6218\u3002 \u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u8d2d\u4e70 A2 \u5f00\u53d1\u677f\u5c31\u662f\u4e3a\u4e86\u4f53\u9a8c\u5b9e\u9645\u5e94\u7528\u65f6\u9047\u5230\u7684\u60c5\u51b5\uff0c\u6211\u6ce8\u91cd\u5b9e\u9645\u5e94\u7528\uff0c\u5e0c\u671b\u81ea\u5df1\u80fd\u505a\u5230\u8bad\u7ec3\u63a8\u7406\u4e00\u6761\u9f99\u670d\u52a1\u3002 \uff08\u5982\u679c\u8d2d\u4e70\u65b0\u4e00\u4ee3\u5f00\u53d1\u8005\u5957\u4ef6Atlas 200I DK A2\u540e\uff0c\u60a8\u7684\u5e94\u7528\u8ba1\u5212\u53ca\u9884\u8ba1\u6210\u679c\u662f\u4ec0\u4e48\uff1f\uff09","title":"\u4e3a\u4ec0\u4e48\u8981\u8d2d\u4e70 A2 \u5f00\u53d1\u677f"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/","text":"PyTorch \u6a21\u578b\u8f6c\u6362\u4e3a ONNX \u6a21\u578b\u521d\u4f53\u9a8c - 20230603 \u5bf9 PyTorch \u5176\u5b9e\u662f\u4e00\u77e5\u534a\u89e3\u7684\uff0c\u6240\u4ee5\u5728\u8f6c\u6362\u6a21\u578b\u7684\u8fc7\u7a0b\u4e2d\u53bb\u987a\u4fbf\u5b66\u4e60\u77e5\u8bc6\u3002 \u9996\u5148\u5bf9\u6a21\u578b\u8f6c\u6362\u505a\u4e2a\u8bbe\u60f3\uff0c\u5c06 PyTorch \u6a21\u578b\u8f6c\u6362\u6210 ONNX \u6a21\u578b\uff0c\u9700\u8981\u7ecf\u8fc7\u4ee5\u4e0b\u51e0\u6b65\uff1a 1. \u52a0\u8f7d\u6a21\u578b\u7f51\u7edc 2. \u52a0\u8f7d\u6a21\u578b\u6743\u91cd 3. \u8f6c\u6362\u6a21\u578b\u7f51\u7edc \u63cf\u8ff0\u6a21\u578b\u7f51\u7edc \u53c2\u7167\u5b98\u65b9\u6587\u6863\u63cf\u8ff0\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\u7f51\u7edc\u5e76\u521d\u59cb\u5316\u3002 class TheModelClass(nn.Module): def __init__(self): super(TheModelClass, self).__init__() def forward(self, x): x = x + 1 return x \u4fdd\u5b58\u4e0e\u52a0\u8f7d\u6a21\u578b \u5728\u5b98\u65b9\u6587\u6863\u4e2d\uff0c\u6709\u51e0\u79cd\u4fdd\u5b58\u65b9\u5f0f\uff0c\u63a8\u8350\u7684\u4fdd\u5b58\u65b9\u6cd5\u662f\u76f4\u63a5\u4f7f\u7528 torch.save . \u8fd9\u4f1a\u4fdd\u5b58\u6a21\u578b\u7f51\u7edc\u7684\u6743\u91cd\uff08\u4f46\u662f\u6ca1\u6709\u7f51\u7edc\u56fe\uff09\uff0c\u7136\u540e\u4f7f\u7528 model.load_state_dict \u65b9\u6cd5\u52a0\u8f7d\u6743\u91cd\u3002 torch.save(model.state_dict(), PATH) ### # \uff08\u7701\u7565\u521d\u59cb\u5316\u6a21\u578b\uff09 model = TheModelClass(*args, **kwargs) model.load_state_dict(torch.load(PATH)) \u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u4fdd\u5b58\u6574\u4e2a\u6a21\u578b\uff0c\u4f46\u662f\u6a21\u578b\u4e2d\u5982\u679c\u6709 Python \u6076\u610f\u4ee3\u7801\u4e5f\u4f1a\u88ab\u6267\u884c\u3002 torch.save(model, PATH) ### # \uff08\u7701\u7565\u521d\u59cb\u5316\u6a21\u578b\uff09 model = torch.load(PATH) \u4e5f\u53ef\u4ee5\u4f7f\u7528 save \u4f20\u5165\u4e00\u4e2a\u5b57\u5178\u4fdd\u5b58\u4e00\u4e2a\u68c0\u67e5\u70b9\u6a21\u578b\uff0c\u68c0\u67e5\u70b9\u6a21\u578b\u53ef\u4ee5\u5305\u542b\u81ea\u5df1\u5b9a\u4e49\u7684\u5176\u4ed6\u6570\u636e\uff0c\u4f46\u662f\u9700\u8981\u81ea\u5df1\u5199\u52a0\u8f7d\u7684\u65b9\u6cd5\u3002 torch.save({ 'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss, ... }, PATH) \u8fd9\u4e2a\u65b9\u6cd5\u8fd8\u53ef\u4ee5\u4fdd\u5b58\u4f18\u5316\u5668\u53c2\u6570\uff0c\u4f46\u8f6c\u6362\u6a21\u578b\u7528\u4e8e\u63a8\u7406\u4e0d\u9700\u8981\u4f18\u5316\u5668\u3002 \u8fd8\u53ef\u4ee5\u4fdd\u5b58\u4e3a TorchScript \u683c\u5f0f\uff0c\u4e0d\u5c55\u5f00\u8bf4\u3002 \u8f6c\u6362\u4e3a ONNX \u6a21\u578b \u4e00\u4e2a\u542b\u6709\u6743\u91cd\u6a21\u578b\u5c31\u53ef\u4ee5\u8f6c\u6362\u4e3a ONNX \u4e86\uff0c\u8f6c\u6362\u4e3a ONNX \u4e5f\u5f88\u7b80\u5355\uff0c\u4f7f\u7528 PyTorch \u5b98\u65b9\u6559\u7a0b\u4e2d\u7684\u4e00\u6761\u547d\u4ee4\u5c31\u591f\u4e86\uff08\u5982\u679c\u6ca1\u6709\u7b97\u5b50\u7b49\u5947\u5947\u602a\u602a\u7684\u62a5\u9519\u7684\u8bdd\uff09\u3002 torch.onnx.export(model, dummy_input, PATH) \u4e09\u4e2a\u5fc5\u987b\u53c2\u6570\uff1aPython \u6a21\u578b\u5bf9\u8c61\uff0c\u793a\u4f8b\u8f93\u5165\uff0c\u5bfc\u51fa\u8def\u5f84\uff09 \u4f7f\u7528 onnx.helper \u53ef\u4ee5\u8f93\u51fa\u8ba1\u7b97\u56fe graph torch_jit ( %onnx::Add_0[INT64, scalar] ) { %/Constant_output_0 = Constant[value = \\<Scalar Tensor []>]() %2 = Add(%onnx::Add_0, %/Constant_output_0) return %2 } \u9047\u5230\u7684\u95ee\u9898 / \u77e5\u8bc6 \u76f4\u63a5\u8f7d\u5165 pt \u6587\u4ef6\u4f1a\u62a5\u9519 \u6587\u4ef6\u4e2d\u4e0d\u5305\u542b\u7f51\u7edc\u56fe\uff0c\u4e5f\u5c31\u662f\u53ea\u6709\u6a21\u578b\u6587\u4ef6\u4e5f\u4e0d\u80fd\u5f00\u59cb\u63a8\u7406\uff0c\u8fd9\u662f\u6b8b\u7f3a\u7684\u3002 \u6ca1\u6709\u6b63\u786e\u7406\u89e3\u6a21\u578b\u7f51\u7edc \u53d1\u751f\u4e86\u5947\u5947\u602a\u602a\u7684\u62a5\u9519 onnx.export() \u4e2d input_names / output_names \u7684\u4f5c\u7528 \u5bfc\u51fa\u65f6\u6dfb\u52a0\u4e86\u8fd9\u4e2a\u53c2\u6570\u4f1a\u62a5\u9519 ============== Diagnostic Run torch.onnx.export version 2.0.1+cpu ============== verbose: False, log level: Level.ERROR ======================= 0 NONE 0 NOTE 0 WARNING 0 ERROR ======================== Traceback (most recent call last): TypeError: _jit_pass_onnx_set_dynamic_input_shape(): incompatible function arguments. The following argument types are supported: 1. (arg0: torch::jit::Graph, arg1: Dict[str, Dict[int, str]], arg2: List[str]) -> None Invoked with: graph(%0 : Long(requires_grad=0, device=cpu)): %12 : Long(device=cpu) = prim::Constant[value={1}](), scope: model_state_dict.TheModelClass:: %13 : Long(device=cpu) = prim::Constant[value={1}]() %11 : Long(requires_grad=0, device=cpu) = aten::add(%0, %13, %12), scope: model_state_dict.TheModelClass:: # c:\\Users\\ASUS\\Qsync-YzlQTSDrive\\Qsync-old\\Code\\convert_onnx\\model_state_dict.py:29:0 return (%11) , {}, 'input1' onnx.export() \u4e2d verbose=True \u7684\u4f5c\u7528 \u4f1a\u5728 ONNX \u4e2d\u751f\u6210\u63cf\u8ff0 \u52a0\u8f7d\u5176\u4ed6\u6a21\u578b\u7684\u6743\u91cd \u5bf9\u4e8e\u52a0\u8f7d\u4e0d\u540c\u6a21\u578b\u6743\u91cd\uff0c\u8981\u52a0\u53c2\u6570 strict=False\uff0c\u4e0d\u7136\u4f1a\u62a5\u9519 Traceback (most recent call last): raise RuntimeError('Error(s) in loading state_dict for {}:\\n\\t{}'.format( RuntimeError: Error(s) in loading state_dict for TheModelClass: Unexpected key(s) in state_dict: \"conv1.weight\", \"conv1.bias\", \"conv2.weight\", \"conv2.bias\", \"fc1.weight\", \"fc1.bias\", \"fc2.weight\", \"fc2.bias\", \"fc3.weight\", \"fc3.bias\". \u4ec0\u4e48\u662f state_dict \uff1f \u5728 PyTorch \u4e2d\uff0c\u6a21\u578b\u7684\u53ef\u5b66\u4e60\u53c2\u6570\uff08\u5373\u6743\u91cd\u548c\u504f\u5dee\uff09\u5305\u542b\u5728\u6a21\u578b\u7684 \u53c2\u6570 \uff08\u4f7f\u7528 \u8bbf\u95ee\uff09\u4e2d\u3002 \u5916\u90e8\u94fe\u63a5 \u52a0\u8f7d\uff1a \u4fdd\u5b58\u548c\u52a0\u8f7d\u6a21\u578b \u2014 PyTorch \u6559\u7a0b 2.0.1+cu117 \u6587\u6863 \u8f6c\u6362 ONNX \u6a21\u578b\uff1a torch.onnx \u2014 PyTorch 2.0 \u6587\u6863","title":"PyTorch \u6a21\u578b\u8f6c\u6362\u4e3a ONNX \u6a21\u578b\u521d\u4f53\u9a8c - 20230603"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#pytorch-onnx-20230603","text":"\u5bf9 PyTorch \u5176\u5b9e\u662f\u4e00\u77e5\u534a\u89e3\u7684\uff0c\u6240\u4ee5\u5728\u8f6c\u6362\u6a21\u578b\u7684\u8fc7\u7a0b\u4e2d\u53bb\u987a\u4fbf\u5b66\u4e60\u77e5\u8bc6\u3002 \u9996\u5148\u5bf9\u6a21\u578b\u8f6c\u6362\u505a\u4e2a\u8bbe\u60f3\uff0c\u5c06 PyTorch \u6a21\u578b\u8f6c\u6362\u6210 ONNX \u6a21\u578b\uff0c\u9700\u8981\u7ecf\u8fc7\u4ee5\u4e0b\u51e0\u6b65\uff1a 1. \u52a0\u8f7d\u6a21\u578b\u7f51\u7edc 2. \u52a0\u8f7d\u6a21\u578b\u6743\u91cd 3. \u8f6c\u6362\u6a21\u578b\u7f51\u7edc","title":"PyTorch \u6a21\u578b\u8f6c\u6362\u4e3a ONNX \u6a21\u578b\u521d\u4f53\u9a8c - 20230603"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#_1","text":"\u53c2\u7167\u5b98\u65b9\u6587\u6863\u63cf\u8ff0\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\u7f51\u7edc\u5e76\u521d\u59cb\u5316\u3002 class TheModelClass(nn.Module): def __init__(self): super(TheModelClass, self).__init__() def forward(self, x): x = x + 1 return x","title":"\u63cf\u8ff0\u6a21\u578b\u7f51\u7edc"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#_2","text":"\u5728\u5b98\u65b9\u6587\u6863\u4e2d\uff0c\u6709\u51e0\u79cd\u4fdd\u5b58\u65b9\u5f0f\uff0c\u63a8\u8350\u7684\u4fdd\u5b58\u65b9\u6cd5\u662f\u76f4\u63a5\u4f7f\u7528 torch.save . \u8fd9\u4f1a\u4fdd\u5b58\u6a21\u578b\u7f51\u7edc\u7684\u6743\u91cd\uff08\u4f46\u662f\u6ca1\u6709\u7f51\u7edc\u56fe\uff09\uff0c\u7136\u540e\u4f7f\u7528 model.load_state_dict \u65b9\u6cd5\u52a0\u8f7d\u6743\u91cd\u3002 torch.save(model.state_dict(), PATH) ### # \uff08\u7701\u7565\u521d\u59cb\u5316\u6a21\u578b\uff09 model = TheModelClass(*args, **kwargs) model.load_state_dict(torch.load(PATH)) \u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u4fdd\u5b58\u6574\u4e2a\u6a21\u578b\uff0c\u4f46\u662f\u6a21\u578b\u4e2d\u5982\u679c\u6709 Python \u6076\u610f\u4ee3\u7801\u4e5f\u4f1a\u88ab\u6267\u884c\u3002 torch.save(model, PATH) ### # \uff08\u7701\u7565\u521d\u59cb\u5316\u6a21\u578b\uff09 model = torch.load(PATH) \u4e5f\u53ef\u4ee5\u4f7f\u7528 save \u4f20\u5165\u4e00\u4e2a\u5b57\u5178\u4fdd\u5b58\u4e00\u4e2a\u68c0\u67e5\u70b9\u6a21\u578b\uff0c\u68c0\u67e5\u70b9\u6a21\u578b\u53ef\u4ee5\u5305\u542b\u81ea\u5df1\u5b9a\u4e49\u7684\u5176\u4ed6\u6570\u636e\uff0c\u4f46\u662f\u9700\u8981\u81ea\u5df1\u5199\u52a0\u8f7d\u7684\u65b9\u6cd5\u3002 torch.save({ 'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss, ... }, PATH) \u8fd9\u4e2a\u65b9\u6cd5\u8fd8\u53ef\u4ee5\u4fdd\u5b58\u4f18\u5316\u5668\u53c2\u6570\uff0c\u4f46\u8f6c\u6362\u6a21\u578b\u7528\u4e8e\u63a8\u7406\u4e0d\u9700\u8981\u4f18\u5316\u5668\u3002 \u8fd8\u53ef\u4ee5\u4fdd\u5b58\u4e3a TorchScript \u683c\u5f0f\uff0c\u4e0d\u5c55\u5f00\u8bf4\u3002","title":"\u4fdd\u5b58\u4e0e\u52a0\u8f7d\u6a21\u578b"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#onnx","text":"\u4e00\u4e2a\u542b\u6709\u6743\u91cd\u6a21\u578b\u5c31\u53ef\u4ee5\u8f6c\u6362\u4e3a ONNX \u4e86\uff0c\u8f6c\u6362\u4e3a ONNX \u4e5f\u5f88\u7b80\u5355\uff0c\u4f7f\u7528 PyTorch \u5b98\u65b9\u6559\u7a0b\u4e2d\u7684\u4e00\u6761\u547d\u4ee4\u5c31\u591f\u4e86\uff08\u5982\u679c\u6ca1\u6709\u7b97\u5b50\u7b49\u5947\u5947\u602a\u602a\u7684\u62a5\u9519\u7684\u8bdd\uff09\u3002 torch.onnx.export(model, dummy_input, PATH) \u4e09\u4e2a\u5fc5\u987b\u53c2\u6570\uff1aPython \u6a21\u578b\u5bf9\u8c61\uff0c\u793a\u4f8b\u8f93\u5165\uff0c\u5bfc\u51fa\u8def\u5f84\uff09 \u4f7f\u7528 onnx.helper \u53ef\u4ee5\u8f93\u51fa\u8ba1\u7b97\u56fe graph torch_jit ( %onnx::Add_0[INT64, scalar] ) { %/Constant_output_0 = Constant[value = \\<Scalar Tensor []>]() %2 = Add(%onnx::Add_0, %/Constant_output_0) return %2 }","title":"\u8f6c\u6362\u4e3a ONNX \u6a21\u578b"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#_3","text":"","title":"\u9047\u5230\u7684\u95ee\u9898 / \u77e5\u8bc6"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#pt","text":"\u6587\u4ef6\u4e2d\u4e0d\u5305\u542b\u7f51\u7edc\u56fe\uff0c\u4e5f\u5c31\u662f\u53ea\u6709\u6a21\u578b\u6587\u4ef6\u4e5f\u4e0d\u80fd\u5f00\u59cb\u63a8\u7406\uff0c\u8fd9\u662f\u6b8b\u7f3a\u7684\u3002","title":"\u76f4\u63a5\u8f7d\u5165 pt \u6587\u4ef6\u4f1a\u62a5\u9519"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#_4","text":"\u53d1\u751f\u4e86\u5947\u5947\u602a\u602a\u7684\u62a5\u9519","title":"\u6ca1\u6709\u6b63\u786e\u7406\u89e3\u6a21\u578b\u7f51\u7edc"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#onnxexport-input_names-output_names","text":"\u5bfc\u51fa\u65f6\u6dfb\u52a0\u4e86\u8fd9\u4e2a\u53c2\u6570\u4f1a\u62a5\u9519 ============== Diagnostic Run torch.onnx.export version 2.0.1+cpu ============== verbose: False, log level: Level.ERROR ======================= 0 NONE 0 NOTE 0 WARNING 0 ERROR ======================== Traceback (most recent call last): TypeError: _jit_pass_onnx_set_dynamic_input_shape(): incompatible function arguments. The following argument types are supported: 1. (arg0: torch::jit::Graph, arg1: Dict[str, Dict[int, str]], arg2: List[str]) -> None Invoked with: graph(%0 : Long(requires_grad=0, device=cpu)): %12 : Long(device=cpu) = prim::Constant[value={1}](), scope: model_state_dict.TheModelClass:: %13 : Long(device=cpu) = prim::Constant[value={1}]() %11 : Long(requires_grad=0, device=cpu) = aten::add(%0, %13, %12), scope: model_state_dict.TheModelClass:: # c:\\Users\\ASUS\\Qsync-YzlQTSDrive\\Qsync-old\\Code\\convert_onnx\\model_state_dict.py:29:0 return (%11) , {}, 'input1'","title":"onnx.export() \u4e2d input_names / output_names \u7684\u4f5c\u7528"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#onnxexport-verbosetrue","text":"\u4f1a\u5728 ONNX \u4e2d\u751f\u6210\u63cf\u8ff0","title":"onnx.export() \u4e2d verbose=True \u7684\u4f5c\u7528"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#_5","text":"\u5bf9\u4e8e\u52a0\u8f7d\u4e0d\u540c\u6a21\u578b\u6743\u91cd\uff0c\u8981\u52a0\u53c2\u6570 strict=False\uff0c\u4e0d\u7136\u4f1a\u62a5\u9519 Traceback (most recent call last): raise RuntimeError('Error(s) in loading state_dict for {}:\\n\\t{}'.format( RuntimeError: Error(s) in loading state_dict for TheModelClass: Unexpected key(s) in state_dict: \"conv1.weight\", \"conv1.bias\", \"conv2.weight\", \"conv2.bias\", \"fc1.weight\", \"fc1.bias\", \"fc2.weight\", \"fc2.bias\", \"fc3.weight\", \"fc3.bias\".","title":"\u52a0\u8f7d\u5176\u4ed6\u6a21\u578b\u7684\u6743\u91cd"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#state_dict","text":"\u5728 PyTorch \u4e2d\uff0c\u6a21\u578b\u7684\u53ef\u5b66\u4e60\u53c2\u6570\uff08\u5373\u6743\u91cd\u548c\u504f\u5dee\uff09\u5305\u542b\u5728\u6a21\u578b\u7684 \u53c2\u6570 \uff08\u4f7f\u7528 \u8bbf\u95ee\uff09\u4e2d\u3002","title":"\u4ec0\u4e48\u662f state_dict \uff1f"},{"location":"Technology/Machine-Learning/First-try-PyTorch-model-convert-to-ONNX-20230603/#_6","text":"\u52a0\u8f7d\uff1a \u4fdd\u5b58\u548c\u52a0\u8f7d\u6a21\u578b \u2014 PyTorch \u6559\u7a0b 2.0.1+cu117 \u6587\u6863 \u8f6c\u6362 ONNX \u6a21\u578b\uff1a torch.onnx \u2014 PyTorch 2.0 \u6587\u6863","title":"\u5916\u90e8\u94fe\u63a5"},{"location":"Technology/Machine-Learning/Machine-Learning-Home/","text":"\u673a\u5668\u5b66\u4e60 - \u4e3b\u9875 \u6587\u7ae0\u65f6\u95f4\u7ebf PyTorch \u6a21\u578b\u8f6c\u6362\u4e3a ONNX \u6a21\u578b\u521d\u4f53\u9a8c - 20230603","title":"Machine Learning"},{"location":"Technology/Machine-Learning/Machine-Learning-Home/#-","text":"","title":"\u673a\u5668\u5b66\u4e60 - \u4e3b\u9875"},{"location":"Technology/Machine-Learning/Machine-Learning-Home/#_1","text":"PyTorch \u6a21\u578b\u8f6c\u6362\u4e3a ONNX \u6a21\u578b\u521d\u4f53\u9a8c - 20230603","title":"\u6587\u7ae0\u65f6\u95f4\u7ebf"}]}